@page "/login"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@using System.ComponentModel.DataAnnotations
@inject AuthApiClient AuthApi

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<p>Please enter your email and password to login.</p>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @messageClass">@message</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string message = string.Empty;
    private string messageClass = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        message = string.Empty;

        try
        {
            bool success = await AuthApi.LoginAsync(loginModel.Email, loginModel.Password);

            if (success)
            {
                message = "Login successful!";
                messageClass = "alert-success";

                // TODO: redirect the user or load user data
            }
            else
            {
                message = "Login failed. Please check your email and password.";
                messageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
            messageClass = "alert-danger";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
